// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

/// @seed = "npm run db:seed"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum VibeLevel {
  DEAD
  MID
  LIT
  CHAOTIC
}

enum QueueLength {
  NONE
  SHORT
  LONG
  INSANE
}

model Venue {
  id             String        @id @default(uuid())
  name           String
  slug           String        @unique
  address        String
  lat            Float
  lon            Float
  categories     String[]      // Example: ["hip-hop", "rooftop"]
  isFeatured     Boolean       @default(false)
  coverPhotoUrl  String?       
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  vibeReports    VibeReport[]
}

model VibeReport {
  id            String       @id @default(uuid())
  venue         Venue        @relation(fields: [venueId], references: [id])
  venueId       String

  submittedAt   DateTime     @default(now())
  vibeLevel     Int
  queueLength   QueueLength?
  coverCharge   Int?
  musicGenre    String?
  notes         String?
  imageUrl      String?      // URL to uploaded image in Vercel Blob Store

  ipAddress     String?      // For light anti-spam tracking
  userAgent     String?
  geoHint       String?      // Browser-based or derived from IP

  userAnonId    String?      // Optional: Fingerprinted session or device ID
  userId        String?      // Optional: Authenticated user ID
  user          User?        @relation(fields: [userId], references: [id])
  flagged       Boolean      @default(false)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("user")
  passwordHash  String?

  accounts      Account[]
  sessions      Session[]
  vibeReports   VibeReport[] // Add this line for the relation

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}